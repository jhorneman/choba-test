/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,13],$V1=[2,6],$V2=[1,4],$V3=[1,9],$V4=[6,9,13],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,32],$V9=[1,38],$Va=[15,16],$Vb=[1,41],$Vc=[1,46],$Vd=[1,49],$Ve=[9,13],$Vf=[1,53],$Vg=[1,67],$Vh=[1,68],$Vi=[1,69],$Vj=[1,66],$Vk=[1,54],$Vl=[1,55],$Vm=[1,58],$Vn=[1,59],$Vo=[2,34],$Vp=[1,76],$Vq=[16,41,57],$Vr=[1,80],$Vs=[16,41,55,57],$Vt=[1,81],$Vu=[16,41,53,55,57],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[16,41,48,49,50,51,53,55,57],$VA=[1,86],$VB=[1,87],$VC=[16,41,45,46,48,49,50,51,53,55,57];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"optional_text_between_scenes":4,"scenes":5,"eof":6,"scene":7,"raw_blocks":8,"raw":9,"scene_cmd":10,"scene_blocks":11,"end_scene_cmd":12,"command_start":13,"scene_keyword":14,"identifier":15,"command_end":16,"endScene_keyword":17,"scene_block":18,"tag_block":19,"leadin_block":20,"content_block":21,"tags_keyword":22,"tags":23,"leadin_keyword":24,"content":25,"endleadin_keyword":26,"content_keyword":27,"end_content_cmd":28,"endContent_keyword":29,"raw_or_expression":30,"var_or_set":31,"if_command":32,"goto_command":33,"inject_command":34,"expression":35,"assign":36,"primary_expression":37,"literal_number":38,"literal_string":39,"open_parens":40,"close_parens":41,"unary_expression":42,"not":43,"additive_expression":44,"add":45,"subtract":46,"relational_expression":47,"gt":48,"lt":49,"gteq":50,"lteq":51,"equality_expression":52,"eq":53,"logical_and_expression":54,"and":55,"logical_or_expression":56,"or":57,"if_keyword":58,"endif_keyword":59,"else_keyword":60,"goto_keyword":61,"endgoto_keyword":62,"inject_keyword":63,"inject_option_keyword":64,"inject_block_keyword":65,"$accept":0,"$end":1},
terminals_: {2:"error",6:"eof",9:"raw",13:"command_start",14:"scene_keyword",15:"identifier",16:"command_end",17:"endScene_keyword",22:"tags_keyword",24:"leadin_keyword",26:"endleadin_keyword",27:"content_keyword",29:"endContent_keyword",36:"assign",38:"literal_number",39:"literal_string",40:"open_parens",41:"close_parens",43:"not",45:"add",46:"subtract",48:"gt",49:"lt",50:"gteq",51:"lteq",53:"eq",55:"and",57:"or",58:"if_keyword",59:"endif_keyword",60:"else_keyword",61:"goto_keyword",62:"endgoto_keyword",64:"inject_option_keyword",65:"inject_block_keyword"},
productions_: [0,[3,3],[3,2],[5,3],[5,2],[4,1],[4,0],[8,2],[8,1],[7,3],[10,4],[12,3],[11,3],[11,2],[18,1],[18,1],[18,1],[19,3],[19,2],[23,2],[23,1],[20,6],[21,4],[21,3],[28,3],[25,2],[25,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,3],[31,5],[37,1],[37,1],[37,1],[37,3],[42,1],[42,2],[44,1],[44,3],[44,3],[47,1],[47,3],[47,3],[47,3],[47,3],[52,1],[52,3],[54,1],[54,3],[56,1],[56,3],[35,1],[32,8],[32,12],[33,8],[34,4],[63,1],[63,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 return {}; 
break;
case 3:
 this.$[$$[$0-1].id] = $$[$0-1]; delete $$[$0-1].id; 
break;
case 4:
 this.$ = {}; this.$[$$[$0-1].id] = $$[$0-1]; delete $$[$0-1].id; 
break;
case 9:
 this.$ = Object.assign({ id: $$[$0-2], tags: [], leadIn: [], content: [] }, $$[$0-1]); 
break;
case 10:
 this.$ = $$[$0-1]; 
break;
case 12:
 this.$ = Object.assign($$[$0-2], $$[$0]); 
break;
case 13:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = { tags: $$[$0-1] }; 
break;
case 18:
 this.$ = { tags: [] }; 
break;
case 19: case 25:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 20:
 this.$ = [ $$[$0] ]; 
break;
case 21:
 this.$ = { leadIn : $$[$0-3] }; 
break;
case 22:
 this.$ = { content: ['seq'].concat($$[$0-1]) }; 
break;
case 23:
 this.$ = { content: [] }; 
break;
case 26:
 this.$ = [$$[$0]] 
break;
case 27:
 this.$ = ['text', $$[$0]]; 
break;
case 32:
 this.$ = ['var', $$[$0-1]]; 
break;
case 33:
 this.$ = ['set', $$[$0-3], $$[$0-1]]; 
break;
case 34:
 this.$ = ['var', $$[$0]]; 
break;
case 35:
 this.$ = ['literal', {type: 'integer', value: Number($$[$0])} ]; 
break;
case 36:
 this.$ = ['literal', {type: 'string', value: $$[$0].slice(1, -1)} ]; 
break;
case 37:
 this.$ =  $$[$0-1]; 
break;
case 39:
 this.$ = ['eq', $$[$0], { type: 'boolean', value: false }]; 
break;
case 41: case 42: case 44: case 45: case 46: case 47: case 49: case 51: case 53:
 this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 55:
 this.$ = ['if', $$[$0-5], $$[$0-3]]; 
break;
case 56:
 this.$ = ['if', $$[$0-9], $$[$0-7], $$[$0-3]]; 
break;
case 57:
 this.$ = ['addOption', $$[$0-3], 'goto', $$[$0-5]]; 
break;
case 58:
 this.$ = [$$[$0-2]].concat($$[$0-1]); 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,8:3,9:$V2}),{1:[3]},{5:5,6:[1,6],7:7,10:8,13:$V3},o($V0,[2,5],{9:[1,10]}),o($V4,[2,8]),{6:[1,11],7:12,10:8,13:$V3},{1:[2,2]},o($V0,$V1,{8:3,4:13,9:$V2}),{11:14,13:[1,15]},{14:[1,16]},o($V4,[2,7]),{1:[2,1]},o($V0,$V1,{8:3,4:17,9:$V2}),o($V0,[2,4]),{12:18,13:[1,19]},{18:20,19:21,20:22,21:23,22:$V5,24:$V6,27:$V7},{15:[1,27]},o($V0,[2,3]),o($V4,[2,9]),{17:[1,29],18:28,19:21,20:22,21:23,22:$V5,24:$V6,27:$V7},{13:[2,13]},{13:[2,14]},{13:[2,15]},{13:[2,16]},{15:$V8,16:[1,31],23:30},{16:[1,33]},{16:[1,34]},{16:[1,35]},{13:[2,12]},{16:[1,36]},{15:$V9,16:[1,37]},{13:[2,18]},o($Va,[2,20]),{9:$Vb,13:$Vc,25:39,30:40,31:42,32:43,33:44,34:45},{9:$Vb,13:$Vd,25:47,28:48,30:40,31:42,32:43,33:44,34:45},{13:[2,10]},o($V4,[2,11]),{13:[2,17]},o($Va,[2,19]),{9:$Vb,13:[1,50],30:51,31:42,32:43,33:44,34:45},o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),{15:$Vf,35:52,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57,58:$Vk,61:$Vl,63:56,64:$Vm,65:$Vn},{9:$Vb,13:$Vd,28:70,30:51,31:42,32:43,33:44,34:45},{13:[2,23]},{15:$Vf,29:[1,71],35:52,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57,58:$Vk,61:$Vl,63:56,64:$Vm,65:$Vn},{15:$Vf,26:[1,72],35:52,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57,58:$Vk,61:$Vl,63:56,64:$Vm,65:$Vn},o($Ve,[2,25]),{16:[1,73]},o([16,45,46,48,49,50,51,53,55,57],$Vo,{36:[1,74]}),{15:$Vp,35:75,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57},{15:[1,77]},{15:$V8,23:78},o([16,41],[2,54],{57:[1,79]}),{15:[2,59]},{15:[2,60]},o($Vq,[2,52],{55:$Vr}),o($Vs,[2,50],{53:$Vt}),o($Vu,[2,48],{48:$Vv,49:$Vw,50:$Vx,51:$Vy}),o($Vz,[2,43],{45:$VA,46:$VB}),o($VC,[2,40]),o($VC,[2,38]),{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:88,43:$Vj},o($VC,[2,35]),o($VC,[2,36]),{15:$Vp,35:89,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57},{13:[2,22]},{16:[1,90]},{16:[1,91]},o($Ve,[2,32]),{15:$Vp,35:92,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57},{16:[1,93]},o($VC,$Vo),{16:[1,94]},{15:$V9,16:[1,95]},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:96},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:97},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:98},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:99},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:100},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:101},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:102},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:103,43:$Vj},{15:$Vp,37:65,38:$Vg,39:$Vh,40:$Vi,42:104,43:$Vj},o($VC,[2,39]),{41:[1,105]},{13:[2,24]},{13:[2,21]},{16:[1,106]},{9:$Vb,13:$Vc,25:107,30:40,31:42,32:43,33:44,34:45},{9:$Vb,13:$Vc,30:108,31:42,32:43,33:44,34:45},o($Ve,[2,58]),o($Vq,[2,53],{55:$Vr}),o($Vs,[2,51],{53:$Vt}),o($Vu,[2,49],{48:$Vv,49:$Vw,50:$Vx,51:$Vy}),o($Vz,[2,44],{45:$VA,46:$VB}),o($Vz,[2,45],{45:$VA,46:$VB}),o($Vz,[2,46],{45:$VA,46:$VB}),o($Vz,[2,47],{45:$VA,46:$VB}),o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,37]),o($Ve,[2,33]),{9:$Vb,13:[1,109],30:51,31:42,32:43,33:44,34:45},{13:[1,110]},{15:$Vf,35:52,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57,58:$Vk,59:[1,111],60:[1,112],61:$Vl,63:56,64:$Vm,65:$Vn},{62:[1,113]},{16:[1,114]},{16:[1,115]},{16:[1,116]},o($Ve,[2,55]),{9:$Vb,13:$Vc,25:117,30:40,31:42,32:43,33:44,34:45},o($Ve,[2,57]),{9:$Vb,13:[1,118],30:51,31:42,32:43,33:44,34:45},{15:$Vf,35:52,37:65,38:$Vg,39:$Vh,40:$Vi,42:64,43:$Vj,44:63,47:62,52:61,54:60,56:57,58:$Vk,59:[1,119],61:$Vl,63:56,64:$Vm,65:$Vn},{16:[1,120]},o($Ve,[2,56])],
defaultActions: {6:[2,2],11:[2,1],20:[2,13],21:[2,14],22:[2,15],23:[2,16],28:[2,12],31:[2,18],35:[2,10],37:[2,17],48:[2,23],58:[2,59],59:[2,60],70:[2,22],90:[2,24],91:[2,21]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:yy_.yytext = '{'; return 9;
break;
case 1:yy_.yytext = '\\'; return 9;
break;
case 2:this.pushState('inside_cmd'); yy_.yytext = ''; return 13;
break;
case 3:return 9;
break;
case 4:/* skip */
break;
case 5:return 14;
break;
case 6:return 22;
break;
case 7:return 27;
break;
case 8:return 17;
break;
case 9:return 29;
break;
case 10:return 24;
break;
case 11:return 26;
break;
case 12:return 64;
break;
case 13:return 65;
break;
case 14:return 58;
break;
case 15:return 60;
break;
case 16:return 59;
break;
case 17:return 61;
break;
case 18:return 62;
break;
case 19:return 61;
break;
case 20:return 62;
break;
case 21:return 38;
break;
case 22:return 39;
break;
case 23:return 40;
break;
case 24:return 41;
break;
case 25:return 43;
break;
case 26:return 43;
break;
case 27:yy_.yytext = 'add'; return yy_.yytext;
break;
case 28:yy_.yytext = 'subtract'; return yy_.yytext;
break;
case 29:yy_.yytext = 'gt'; return yy_.yytext;
break;
case 30:yy_.yytext = 'lt'; return yy_.yytext;
break;
case 31:yy_.yytext = 'eq'; return yy_.yytext;
break;
case 32:yy_.yytext = 'gteq'; return yy_.yytext;
break;
case 33:yy_.yytext = 'lteq'; return yy_.yytext;
break;
case 34:return 57;
break;
case 35:return 55;
break;
case 36:return 36;
break;
case 37:return 15;
break;
case 38:this.popState(); yy_.yytext = ''; return 16;
break;
case 39:return 6;
break;
}
},
rules: [/^(?:\\(?=\{)\{)/i,/^(?:\\)/i,/^(?:\{)/i,/^(?:[^\x00\\{]+)/i,/^(?:\s+)/i,/^(?:scene\b)/i,/^(?:tags\b)/i,/^(?:content\b)/i,/^(?:endScene\b)/i,/^(?:endContent\b)/i,/^(?:leadin\b)/i,/^(?:endLeadin\b)/i,/^(?:injectOption\b)/i,/^(?:injectBlock\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:endif\b)/i,/^(?:goto\b)/i,/^(?:endgoto\b)/i,/^(?:goto\b)/i,/^(?:endgoto\b)/i,/^(?:[0-9]+)/i,/^(?:"[^\x00\""]+")/i,/^(?:\()/i,/^(?:\))/i,/^(?:!)/i,/^(?:not\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:=)/i,/^(?:[a-zA-Z0-9\-_]+)/i,/^(?:\}\n?)/i,/^(?:$)/i],
conditions: {"inside_cmd":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,39],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function () {};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}